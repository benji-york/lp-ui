import datetime
import mido
import thespian.actors
import time


class SubscriptionManager(object):

    def __init__(self, send_func):
        self.subscribers = []
        self.send_func = send_func

    def new(self, subscriber):
        self.subscribers.append(subscriber)

    def send_message(self, message):
        for subscriber in self.subscribers:
            self.send_func(subscriber, message)


class MidiInput(thespian.actors.Actor):
    
    initialized = False

    def init(self):
        self.initialized = True
        self._port = mido.open_input('Launchpad MK2 MIDI 1')
        self.subscriptions = SubscriptionManager(send_func=self.send)
        self.wakeupAfter(datetime.timedelta(milliseconds=10))

    def next(self):
        midi_message = self._port.poll()
        if midi_message is not None:
            self.subscriptions.send_message(('midi-input-event', midi_message))
        self.wakeupAfter(datetime.timedelta(milliseconds=10))
        
    def receiveMessage(self, message, sender):
        if not self.initialized:
            self.init()

        case message:
            match ('subscribe', subscriber):
                self.subscriptions.new(subscriber)
            match message is thespian.actors.WakeupMessage:
                self.next()



class ButtonPressInterpreter(thespian.actors.Actor):
    initialized = False

    def init(self):
        self.initialized = True
        self.subscriptions = SubscriptionManager(send_func=self.send)

    def receiveMessage(self, message, sender):
        if not self.initialized:
            self.init()

        case message:
            match ('subscribe', subscriber):
                self.subscriptions.new(subscriber)
            match ('midi-input-event', event):
                column, row = event.note % 10 - 1, event.note // 10 - 1
                if event.velocity:
                    event_type = 'lp-button-down'
                else:
                    event_type = 'lp-button-up'

                self.subscriptions.send_message((event_type, row, column))
            

class MessagePrinter(thespian.actors.Actor):

    def receiveMessage(self, message, sender):
        print(message)


def run(systembase=None):
    system = thespian.actors.ActorSystem(systembase)
    midi_poller = system.createActor(MidiInput)
    printer = system.createActor(MessagePrinter)
    button_press_interpreter = system.createActor(ButtonPressInterpreter)

    system.tell(midi_poller, ('subscribe', button_press_interpreter))
    system.tell(button_press_interpreter, ('subscribe', printer))

    for _ in range(999):
        # How do I keep messages flowing without doing this?
        system.tell(midi_poller, 'nop')
        time.sleep(.01)

    system.shutdown()


if __name__ == '__main__':
    run()
