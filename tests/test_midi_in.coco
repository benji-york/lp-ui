from .helpers import InitializationMixin, WakeupsForeverMixin, FauxRef
from .helpers import faux_create, init_actor
import launchpad
import thespian.actors
import unittest


class FauxMidiPort(object):

    name = None
    polled = False

    def __init__(self, name, messages=()):
        self.name = name
        self.messages = messages

    def poll(self):
        self.polled = True
        if self.messages:
            return self.messages.pop(0)
        else:
            return None


class TestMidiIn(unittest.TestCase, InitializationMixin, WakeupsForeverMixin):
    """Tests for the MidiIn actor."""

    def setUp(self):
        self.actor = faux_create(launchpad.MidiIn)
        self.actor.open_input_port = FauxMidiPort

    @init_actor
    def test_midi_port_name(self):
        # The correct name is used when opening the MIDI port.
        self.assertEqual(self.actor.port.name, 'Launchpad MK2 MIDI 1')

    @init_actor
    def test_wakeups_poll(self):
        # Every time a wakeup message is received by the actor, the MIDI input
        # port is polled.
        self.actor.receiveMessage(thespian.actors.WakeupMessage(0), sender=None)
        self.assertTrue(self.actor.port.polled)

    @init_actor
    def test_subscriptions(self):
        # When a MIDI message is available at the input port, it will be sent
        # to subscribers when the next wakeup happens.
        self.actor.port.messages = ['message-1', 'message-2']
        self.actor.receiveMessage(('subscribe', 'fake'), sender=None)
        # Now that we have a subscriber and a pending MIDI input, a wakeup
        # will send the message to all subscribers.
        self.actor.receiveMessage(thespian.actors.WakeupMessage(0), sender=None)
        self.assertEqual(
                self.actor.sent_messages,
                [('fake', ('midi-input-event', 'message-1'))])
        # A second wakeup will send the next message.
        self.actor.receiveMessage(thespian.actors.WakeupMessage(0), sender=None)
        self.assertEqual(
                self.actor.sent_messages,
                [('fake', ('midi-input-event', 'message-1')),
                 ('fake', ('midi-input-event', 'message-2'))])
